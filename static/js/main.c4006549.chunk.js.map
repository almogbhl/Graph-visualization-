{"version":3,"sources":["components/Graph.js","App.js","index.js"],"names":["PrintGraph","state","graph","options","studentsData","calcAverage","students","map","student","total","average","scores","score","push","reduce","acc","val","parseInt","length","_this","setState","createGraph","nodes","edges","createBaseNodes","id","label","color","border","background","from","to","setGraphOptions","layout","hierarchical","font","strokeColor","align","dashes","highlight","size","face","shape","manipulateData","counterChild","counterParent","counterAverage","u","_id","child","firstNodeTemplate","name","averageNodeTemplate","concat","s","firstEdgeTemplate","type","secondNodeTemplate","averageEdgeTemplate","hasFailedTemplate","hasPassedTemplate","this","react_default","a","createElement","lib_default","style","height","width","overflow","Component","App","Fragment","Graph","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.c4006549.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport Graph from \"react-graph-vis\";\r\nimport students from \"../data/students.json\";\r\n\r\nclass PrintGraph extends Component {\r\n  state = {\r\n    graph: null,\r\n    options: null,\r\n    studentsData: null\r\n  };\r\n\r\n  async componentDidMount() {\r\n    await this.calcAverage();\r\n    this.manipulateData();\r\n  }\r\n\r\n  calcAverage = () => {\r\n    students.map(student => {\r\n      let total;\r\n      let average;\r\n      let scores = [];\r\n\r\n      student.scores.map(score => {\r\n        scores.push(score.score);\r\n      });\r\n\r\n      total = scores.reduce(function(acc, val) {\r\n        return acc + val;\r\n      }, 0);\r\n\r\n      average = parseInt(total / student.scores.length);\r\n\r\n      student[\"average\"] = average;\r\n    });\r\n\r\n    this.setState({ studentsData: students });\r\n  };\r\n\r\n  createGraph = () => {\r\n    let graph = {\r\n      nodes: [],\r\n      edges: []\r\n    };\r\n\r\n    return graph;\r\n  };\r\n\r\n  createBaseNodes = () => {\r\n    const graph = this.createGraph();\r\n\r\n    graph.nodes.push(\r\n      {\r\n        id: 1,\r\n        label: \"grades\",\r\n        color: { border: \"#fff\", background: \"rgba(241, 196, 15,1)\" }\r\n      },\r\n      {\r\n        id: 2,\r\n        label: \"failed\",\r\n        color: { border: \"#fff\", background: \"rgba(234, 32, 39,.4)\" }\r\n      },\r\n      {\r\n        id: 3,\r\n        label: \"passed\",\r\n        color: { border: \"#fff\", background: \"rgba(76, 209, 55,.4)\" }\r\n      }\r\n    );\r\n\r\n    graph.edges.push({ from: 1, to: 2 }, { from: 1, to: 3 });\r\n\r\n    return graph;\r\n  };\r\n\r\n  \r\n  setGraphOptions = () => {\r\n    const options = {\r\n      layout: {\r\n        hierarchical: false\r\n      },\r\n      edges: {\r\n        font: { color: \"#fff\", strokeColor: \"#000\", align: \"middle\" },\r\n        dashes: true,\r\n        length: 180\r\n      },\r\n      nodes: {\r\n        color: {\r\n          border: \"#BFEDF7\",\r\n          background: \"rgba(255,255,255,0.3)\",\r\n          highlight: {\r\n            border: \"#44C4D2\",\r\n            background: \"#246478\"\r\n          }\r\n        },\r\n        font: {\r\n          color: \"#FFF\",\r\n          size: 16,\r\n          face: \"Inconsolata\",\r\n          align: \"center\"\r\n        },\r\n        shape: \"circle\"\r\n      }\r\n    };\r\n\r\n    return options;\r\n  };\r\n\r\n  manipulateData = () => {\r\n    const graph = this.createBaseNodes();\r\n    const options = this.setGraphOptions();\r\n\r\n    const students = this.state.studentsData;\r\n\r\n    let counterChild = 4;\r\n    let counterParent = 4;\r\n    let counterAverage = 4;\r\n\r\n    students.map(u => {\r\n      if (u._id >= 0) {\r\n        const child = u.scores;\r\n        const firstNodeTemplate = { id: counterChild, label: u.name };\r\n        counterChild++;\r\n        const averageNodeTemplate = { id: counterChild, label: `${u.average}` };\r\n\r\n        graph.nodes.push(firstNodeTemplate);\r\n        graph.nodes.push(averageNodeTemplate);\r\n        counterChild++;\r\n\r\n        if (child.length) {\r\n          child.map(s => {\r\n            const score = parseInt(s.score);\r\n            const firstEdgeTemplate = {\r\n              from: counterParent,\r\n              to: counterChild,\r\n              label: `${s.type}`\r\n            };\r\n            const secondNodeTemplate = {\r\n              id: counterChild,\r\n              label: `${score}`,\r\n              color: {\r\n                border: \"#BFEDF7\",\r\n                background: \"transparent\",\r\n\r\n                highlight: {\r\n                  border: \"#44C4D2\",\r\n                  background: \"#246478\"\r\n                }\r\n              }\r\n            };\r\n\r\n            counterAverage = counterParent + 1;\r\n\r\n            const averageEdgeTemplate = {\r\n              from: counterChild,\r\n              to: counterAverage,\r\n              label: `average`\r\n            };\r\n\r\n            const hasFailedTemplate = {\r\n              from: counterAverage,\r\n              to: 2,\r\n              label: \"hasFailed\"\r\n            };\r\n            const hasPassedTemplate = {\r\n              from: counterAverage,\r\n              to: 3,\r\n              label: \"hasPassed\"\r\n            };\r\n\r\n            graph.nodes.push(secondNodeTemplate);\r\n            graph.edges.push(firstEdgeTemplate);\r\n            graph.edges.push(averageEdgeTemplate);\r\n\r\n            if (u.average <= 56) {\r\n              graph.edges.push(hasFailedTemplate);\r\n            } else {\r\n              graph.edges.push(hasPassedTemplate);\r\n            }\r\n            counterChild++;\r\n          });\r\n        }\r\n\r\n        counterParent = counterChild;\r\n      }\r\n    });\r\n\r\n    this.setState({\r\n      options,\r\n      graph\r\n    });\r\n  };\r\n\r\n\r\n  render() {\r\n    if (this.state.graph === null) {\r\n        return \"loading\"\r\n    } else {\r\n        return (\r\n            <div>\r\n              <Graph\r\n                graph={this.state.graph}\r\n                options={this.state.options}\r\n                style={{\r\n                  height: \"100vh\",\r\n                  width: \"100vw\",\r\n                  overflow: \"hidden\",\r\n                  background: \"linear-gradient(#000116, #002538)\"\r\n                }}\r\n              />\r\n            </div>\r\n          );\r\n    }\r\n  }\r\n}\r\n\r\nexport default PrintGraph;\r\n","import React from \"react\";\nimport Graph from \"./components/Graph\";\n\nfunction App() {\n  return (\n    <>\n      <Graph />\n    </>\n  );\n}\n\nexport default App;\n\n\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport './styles/index.css';\n\nimport App from \"./App\";\n\nrender(\n  <>\n    <App />\n  </>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}