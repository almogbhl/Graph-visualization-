{"version":3,"sources":["components/GraphTree/GraphOptions.js","components/GraphTree/CalcAverage.js","components/GraphTree/GraphTree.js","App.js","index.js"],"names":["GraphOptions","layout","hierarchical","edges","font","color","strokeColor","align","dashes","length","nodes","border","background","highlight","size","face","shape","CalcAverage","students","map","student","total","average","scores","score","push","reduce","acc","val","parseInt","GraphTree","state","graph","options","studentsData","nodeTemplate","id","label","edgeTemplate","from","to","createBaseNodes","_this","manipulateData","counterChild","counterParent","counterAverage","u","_id","child","name","concat","s","type","setState","this","_this$state","react_default","a","createElement","lib_default","style","height","width","overflow","Component","App","Fragment","components_GraphTree_GraphTree","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.c944d92b.chunk.js","sourcesContent":["const GraphOptions = () => {\r\n  const options = {\r\n    layout: {\r\n      hierarchical: false\r\n    },\r\n    edges: {\r\n      font: { color: \"#fff\", strokeColor: \"#000\", align: \"middle\" },\r\n      dashes: true,\r\n      length: 180\r\n    },\r\n    nodes: {\r\n      color: {\r\n        border: \"#BFEDF7\",\r\n        background: \"rgba(255,255,255,0.3)\",\r\n        highlight: {\r\n          border: \"#44C4D2\",\r\n          background: \"#246478\"\r\n        }\r\n      },\r\n      font: {\r\n        color: \"#FFF\",\r\n        size: 16,\r\n        face: \"Inconsolata\",\r\n        align: \"center\"\r\n      },\r\n      shape: \"circle\"\r\n    }\r\n  };\r\n\r\n  return options;\r\n};\r\n\r\nexport default GraphOptions;\r\n","const CalcAverage = (students) => {\r\n  students.map(student => {\r\n    let total;\r\n    let average;\r\n    let scores = [];\r\n\r\n    student.scores.map(score => {\r\n      scores.push(score.score);\r\n    });\r\n\r\n    total = scores.reduce(function(acc, val) {\r\n      return acc + val;\r\n    }, 0);\r\n\r\n    average = parseInt(total / student.scores.length);\r\n\r\n    student[\"average\"] = average;\r\n  });\r\n\r\n  return students\r\n};\r\n\r\nexport default CalcAverage;\r\n","import React, { Component } from \"react\";\r\nimport Graph from \"react-graph-vis\";\r\nimport students from \"../../data/students.json\";\r\nimport GraphOptions from \"./GraphOptions\";\r\nimport CalcAverage from \"./CalcAverage\";\r\n\r\nclass GraphTree extends Component {\r\n  state = {\r\n    graph: null,\r\n    options: null,\r\n    studentsData: null\r\n  };\r\n\r\n  async componentWillMount() {\r\n    const studentsData = CalcAverage(students);\r\n    await this.setState({ studentsData });\r\n    this.manipulateData();\r\n  };\r\n\r\n  nodeTemplate = (id, label, color) => {\r\n    return {\r\n      id,\r\n      label,\r\n      color\r\n    }\r\n  };\r\n\r\n  edgeTemplate = (from, to, label) => {\r\n    return {\r\n      from,\r\n      to,\r\n      label\r\n    }\r\n  };\r\n\r\n  createBaseNodes = () => {\r\n    const nodeTemplate = this.nodeTemplate;\r\n    const edgeTemplate = this.edgeTemplate;\r\n    const graph = {\r\n      nodes: [],\r\n      edges: []\r\n    };\r\n    const nodes = graph.nodes;\r\n    const edges = graph.edges;\r\n\r\n    nodes.push(nodeTemplate(1, \"grades\", { border: \"#fff\", background: \"rgba(241, 196, 15,1)\" }))\r\n    nodes.push(nodeTemplate(2, \"failed\", { border: \"#fff\", background: \"rgba(234, 32, 39,.4)\" }))\r\n    nodes.push(nodeTemplate(3, \"passed\", { border: \"#fff\", background: \"rgba(76, 209, 55,.4)\" }))\r\n   \r\n    edges.push(edgeTemplate(1,2));\r\n    edges.push(edgeTemplate(1,3));\r\n\r\n    return graph;\r\n  };\r\n\r\n  manipulateData = () => {\r\n    const graph = this.createBaseNodes();\r\n    const options = GraphOptions();\r\n    const nodes = graph.nodes;\r\n    const edges = graph.edges;\r\n    const students = this.state.studentsData;\r\n    const nodeTemplate = this.nodeTemplate;\r\n    const edgeTemplate = this.edgeTemplate;\r\n\r\n    let counterChild = 4;\r\n    let counterParent = 4;\r\n    let counterAverage = 4;\r\n\r\n    students.map(u => {\r\n      if (u._id >= 0) {\r\n        const child = u.scores;\r\n      \r\n        nodes.push(nodeTemplate(counterChild, u.name));\r\n        counterChild++;\r\n        nodes.push(nodeTemplate(counterChild, `${u.average}`));\r\n        counterChild++;\r\n\r\n        if (child.length) {\r\n          child.map(s => {\r\n            const score = parseInt(s.score);\r\n      \r\n            edges.push(edgeTemplate(counterParent, counterChild, `${s.type}`));\r\n            nodes.push(nodeTemplate(counterChild, `${score}`, {background: \"transparent\",}));\r\n\r\n            counterAverage = counterParent + 1;\r\n        \r\n            edges.push(edgeTemplate(counterChild, counterAverage, \"average\"));\r\n\r\n            if (u.average <= 56) {\r\n              edges.push(edgeTemplate(counterAverage, 2, \"hasFailed\"));\r\n            } else {\r\n              edges.push(edgeTemplate(counterAverage, 3, \"hasPassed\"));\r\n            }\r\n            counterChild++;\r\n          });\r\n        }\r\n        counterParent = counterChild;\r\n      }\r\n    });\r\n\r\n    this.setState({\r\n      options,\r\n      graph\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const {graph, options} = this.state;\r\n    if (graph === null) {\r\n      return \"loading...\";\r\n    } else {\r\n      return (\r\n          <Graph\r\n            graph={graph}\r\n            options={options}\r\n            style={{\r\n              height: \"100vh\",\r\n              width: \"100vw\",\r\n              overflow: \"hidden\",\r\n              background: \"linear-gradient(#000116, #002538)\"\r\n            }}\r\n          />\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default GraphTree;\r\n","import React from \"react\";\nimport GraphTree from \"./components/GraphTree/GraphTree\";\n\nfunction App() {\n  return (\n    <>\n      <GraphTree />\n    </>\n  );\n}\n\nexport default App;\n\n\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport './styles/index.css';\n\nimport App from \"./App\";\n\nrender(\n  <>\n    <App />\n  </>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}